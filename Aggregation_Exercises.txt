1. Select the top 10 most occurring birthdays in our company ordered from greatest to least. 
Show the birthday and the number of employees that share that birthday.

Stage 1: project birthday information and store in variables
Stage 2: group on birthday information by the count, store the count in a variable named birthdays
Stage 3: sort birthdays in descending order
Stage 4: limit to 10

db.employees.aggregate([
{
	$project: {
		birth_day: { $dayOfMonth: "$birth_date" },
      	birth_month: { $month: "$birth_date" },
		birth_year: { $year: "$birth_date" }
	}
},
{
	$group: {
		_id: { year: "$birth_year", month: "$birth_month", day: "$birth_day" },
		birthdays: { $sum: 1}
	}
},
{
    $sort: { birthdays: -1 }
},
{
    $limit: 10
}
])

2. Select the first 10 active employees (ordered by employee number) and show employee number, first name, last name, and current salary from our company.

Stage 1: unwind salaries
Stage 2: match salaries.to_date >= current_date && salaries.from_date < current_date
Stage 3: project emp_no, first_name, last_name, salaries.salary
Stage 4: sort emp_no in desc order
Stage 5: limit 10

db.employees.aggregate([ 
{ 
	$unwind: "$salaries" 
},
{
	$match: {
		"salaries.to_date": {$gte: new ISODate()},
		"salaries.from_date": {$lt: new ISODate()}
	}
},
{
	$project: {
		emp_no: 1, 
		first_name: 1, 
		last_name: 1, 
		"salaries.salary": 1
	}
},
{
    $sort: { emp_no: -1 }
},
{
    $limit: 10
}
])

3. What is the average salary for all employees (also show the number of active employees used for the average)?
Stage 1: unwind salaries
Stage 2: project salaries.salary
Stage 3: group: average salary (average operator of salaries)
		        employee count
		
db.employees.aggregate([ 
{ 
	$unwind: "$salaries" 
},
{
	$match: {
		"salaries.to_date": {$gte: new ISODate()},
		"salaries.from_date": {$lt: new ISODate()}
	}
},
{
	$project: {"salaries.salary": 1}
},
{
    $group: { 
        _id: null,
        average_salary: {$avg: "$salaries.salary"},
        amount_of_people: {$count: {}}
    }
}
])

4. Select the first 10 employees and show employee number, first name, and last name whose current salary is 
greater than the average salary of all employees.  Order it by salaries and then employee number. //didn't test

Query 1:

Number 3's query

Query 2:

Stage 1: unwind salaries
Stage 2: project emp_no, first_name, last_name, salaries.salary
Stage 3: match salaries.salary > average (from javascript)
Stage 4: sort by salaries.salary
Stage 5: sort by emp_no
Stage 6: limit 10

var average = db.employees.aggregate([ 
{ 
	$unwind: "$salaries" 
},
{
	$project: {
		"salaries.salary": 1
	}
},
{
    $group: { 
        _id: null,
        average_salary: {$avg: "$salaries.salary"},
    }
}

db.employees.aggregate([
{ 
	$unwind: "$salaries" 
},
{
	$project: {
		emp_no: 1, 
		first_name: 1, 
		last_name: 1, 
		"salaries.salary": 1
	}
},
{
    $match: {"salaries.salary": {$gt: "average"}} //not sure how to do this, mixes nodeJS, don't care tho
},
{
    $sort: { "salaries.salary": -1 }
},
{
    $sort: { emp_no: -1 }
},
{
    $limit: 10
}
])

5. Now select the first 20 employees and show employee no, first name, last name, the current department they work for and their current salary.

Stage 1: unwind salaries
Stage 2: match salaries.to_date >= new Date() && salaries.from_date < new Date()
Stage 3: unwind departments
Stage 4: match departments.to_date >= new Date() && departments.from_date < new Date()
Stage 5: project emp_no, first_name, last_name, salaries.salary, departments.department
Stage 6: limit 20

db.employees.aggregate([ 
{ 
	$unwind: "$salaries" 
},
{
	$match: {
		"salaries.to_date": {$gte: new ISODate()},
		"salaries.from_date": {$lt: new ISODate()}
	}
},
{ 
	$unwind: "$departments" 
},
{
	$match: {
		"departments.to_date": {$gte: new ISODate()},
		"departments.from_date": {$lt: new ISODate()}
	}
},
{
	$project: {
		emp_no: 1, 
		first_name: 1, 
		last_name: 1, 
		"salaries.salary": 1,
		"departments.department": 1
	}
},
{
    $limit: 20
}
])


6. Select the department and the average current salary for all the employees in it.  Order it by the avg salary in increasing order.

Stage 1: unwind salaries
Stage 2: match salaries.to_date >= new Date() && salaries.from_date < new Date()
Stage 3: unwind departments
Stage 4: match departments.to_date >= new Date() && departments.from_date < new Date()
Stage 5: Group on departments.department, using average salary
Stage 6: project salaries.salary, departments.department
Stage 7: sort by average in ascending order

db.employees.aggregate([ 
{ 
	$unwind: "$salaries" 
},
{
	$match: {
		"salaries.to_date": {$gte: new ISODate()},
		"salaries.from_date": {$lt: new ISODate()}
	}
},
{ 
	$unwind: "$departments" 
},
{
	$match: {
		"departments.to_date": {$gte: new ISODate()},
		"departments.from_date": {$lt: new ISODate()}
	}
},
{
	$project: {
		"salaries.salary": 1,
		"departments.department": 1
	}
},
{
    $group: {
        _id: "$departments.department",
        average_salary: {$avg: "$salaries.salary"}
    }
},
{
    $sort: {average_salary: 1}
}
])

7. Using the $out operator, add a field to the top level of the employee document that has a sep_date: 
ISODate(***). Use the last date they were paid as the sep_date.

Stage 1: add a field - max $salaries.to_date
Stage 2: output the collection with name employees (replaces original employees collection)

db.employees.aggregate([
{
    $addFields: { sep_date: {$max: "$salaries.to_date"} }
},
{
    $out: "employees" // Overwrites the existing employees collection
}
])
